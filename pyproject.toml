[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "novitas"
version = "0.1.0"
description = "Self-Improving AI Multi-Agent System"
authors = [{ name = "Maksim Smirnov", email = "smirnoffmg@gmail.com" }]
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
keywords = ["ai", "multi-agent", "self-improvement", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "langchain>=0.2.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "pydantic>=2.5.0",
    "sqlalchemy>=2.0.0",
    "greenlet>=3.0.0",            # Required for SQLAlchemy async
    "asyncpg>=0.29.0",            # PostgreSQL async driver
    "aiosqlite>=0.19.0",          # SQLite async driver for testing
    "redis>=5.0.0",
    "structlog>=23.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pydantic-settings>=2.1.0",
    "httpx>=0.26.0",
    "tenacity>=8.2.0",            # For retry logic
    "pydantic-core>=2.14.0",
    "alembic>=1.13.0",            # Database migrations
]

[project.optional-dependencies]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
novitas = "novitas.cli:app"

[tool.uv]
dev-dependencies = [
    "ruff>=0.3.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "build>=1.3.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",   # Parallel test execution
    "pytest-timeout>=2.2.0", # Test timeout functionality
    "coverage>=7.10.5",
    "bandit>=1.7.0",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable comprehensive set of rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",    # line too long, handled by formatter
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "PLR2004",
    "S101",
    "ARG",
] # Allow magic values and assert in tests
"__init__.py" = ["F401"] # Allow unused imports in __init__.py

[tool.ruff.lint.isort]
known-first-party = ["novitas"]
force-single-line = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "3.11"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["langchain.*", "redis.*", "asyncpg.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_errors = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "-v",
    "--tb=short",
    "-m",
    "not integration and not slow",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "db: marks tests that require database",
]
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B404", "B603", "B608"]
